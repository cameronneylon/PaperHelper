#!python## Copyright 2010 Cameron Neylon## Licensed under the Apache License, Version 2.0 (the "License");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at## http://www.apache.org/licenses/LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an "AS IS" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.##import loggingfrom waveapi import eventsfrom waveapi import opsfrom waveapi import elementfrom waveapi import robotfrom waveapi import appengine_robot_runnerfrom waveapi import utilimport loggingfrom refparsing import *import re# Regex FiltersREFERENCE_FILTER= '\\(([A-Z][a-z]+[,][ ])+[12][0-9]{3}\\)'FIGURE_FILTER = '(Figure)[ ]\\d+'def doUpdateAuthors(event, wavelet):    passdef doRenumberFigures(event, wavelet):    passdef annotateRefs(event, wavelet):    """Convenience method for annotating text identified as a reference    Method triggers on document changed with a regex filter to identify     references of the form (Capitalisedname + random text, fourdigityear)"""    logging.debug('annotateRefs')    blip = event.blip    for data, citationStart, citationEnd in citation.scanString(blip.text):        r = blip.range(citationStart, citationEnd)        r.annotate('paperhelper.appspot.com/reference', value = 'data')    def doFormatReferences(event, wavelet):    """Method for formatting references based on annotations in the text"""    referencesblip = event.blip    referencesblip.all().replace('')    refcount = 1    for blip in wavelet.blips:        b = wavelet.blips.get(blip)        logging.debug(b)        for ann in b.annotations:            if ann.name == 'paperhelper.appspot.com/reference':                logging.debug(ann.end)                reference = b.text[ann.start:ann.end]                authoryeardict = refParse(reference)                ref, cite = formatReference(getRef(authoryeardict['authors'],                                                   authoryeardict['year']))                referencesblip.append(str(refcount) + ". " + ref + "\n\n")                b.range(ann.start, ann.end).replace("["+str(refcount)+"]")def insertFigure(event, wavelet):    """Inserts an inline blip containing two further inline blips.    The blips are ready to receive an object (usually an image) and    the figure legend"""    blip = event.blip    for ann in blip.annotations:        if ann.name == 'paperhelper.appspot.com/figure' and ann.value == 'todo':            try:                figureblip = blip.insert_inline_blip(ann.end)                figureblip.range(0,-1).annotate('paperhelper.appspot.com/figurenum',                                     value = '#')                objectblip = figureblip.insert_inline_blip(0)                objectblip.append('Insert your object or figure here')                legendblip = objectblip.reply('Figure #')                figure = {'Figure' : figureblip.blip_id,                          'Object' : objectblip.blip_id,                          'Legend' : legendblip.blip_id}                blip.range(ann.start, ann.end).clear_annotation(                                           'paperhelper.appspot.com/figure')            except:                returndef annotateFigureRef(event, wavelet):    """Find a figure reference in blip and annotate to prepare for figure insertion"""    logging.debug('annotateFigureRef')    blip = event.blip    text = blip.text    target = re.compile("(Figure)( )(\\d+)", re.IGNORECASE|re.DOTALL)    figures = target.finditer(text)    r = range(figures[0].start(), figures[0].end())    r.annotate('paperhelper.appspot.com/figure', value = 'todo')    insertFigure(event, wavelet, r)def formatPaper(event, wavelet):    """Sets up a set of blips labeled and formatted for content introduction"""    authorblip = wavelet.reply()    for participant in wavelet.participants:        logging.debug(participant)        authorblip.append(participant + ', ')    authorblip.append(element.Button('updateAuthors', 'Update Author List'))    introductionblip = wavelet.reply()    introductionblip.append('\nIntroduction:\n')    methodsblip = wavelet.reply()    methodsblip.append('\nMethodology:\n')    resultsblip = wavelet.reply()    resultsblip.append('\nResults:\n')    conclusionsblip = wavelet.reply()    conclusionsblip.append('Conclusions:\n\n')    referencesblip = wavelet.reply()    referencesblip.append('References:\n\n')    formatReferencesButton = element.Button('formatReferences', 'Format References!')    referencesblip.append(formatReferencesButton)def OnFormClicked(event, wavelet):    """Handle all form events."""    logging.debug('OnFormClicked(): Button clicked was ' + event.properties['buttonName'])    # Call the corresponding handler - will give an exception if no handler exists    {'formatReferences' : doFormatReferences,     'updateAuthors'    : doUpdateAuthors,     'renumberFigures'  : doRenumberFigures}[event.properties['buttonName']](event, wavelet)def OnRobotAdded(event, wavelet):    """Invoked when the robot has been added.    In this case we need to add the form elements for selecting a feed"""    logging.info('OnRobotAdded()')    formatPaper(event, wavelet)    welcome = wavelet.reply("Hello, I'm PaperHelper. I will help to write and format your scholarly paper. This is Version 0.1 of PaperHelper")    welcome.append(element.Button('renumberFigures', 'Renumber Figures'))if __name__ == '__main__':    paperhelper = robot.Robot('paperhelper',                 image_url='',                 profile_url='')    paperhelper.register_handler(events.WaveletSelfAdded, OnRobotAdded)    paperhelper.register_handler(events.FormButtonClicked, OnFormClicked,                                  context = events.Context.ALL)    paperhelper.register_handler(events.DocumentChanged, annotateFigureRef,                                  filter = FIGURE_FILTER)    paperhelper.register_handler(events.BlipSubmitted, annotateRefs,                                 filter = REFERENCE_FILTER)    appengine_robot_runner.run(paperhelper, debug=True)#